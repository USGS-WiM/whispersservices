# Generated by Django 2.2.18 on 2021-03-19 20:03

from django.conf import settings
from django.contrib.auth.hashers import make_password
from django.db import migrations
import datetime


def create_admin_user_if_missing(apps, schema_editor):
    # Check if the admin user id is already configured
    Configuration = apps.get_model("whispersapi", "Configuration")
    db_alias = schema_editor.connection.alias
    admin_user_id = get_admin_user_id(apps, schema_editor)
    User = apps.get_model("whispersapi", "User")
    if admin_user_id is None or not User.objects.using(
        db_alias).filter(pk=admin_user_id).exists():
        random_password = User.objects.make_random_password()
        admin_user = User.objects.using(db_alias).create(username="admin",
                                                         first_name="Admin",
                                                         last_name="User",
                                                         is_superuser=True,
                                                         is_staff=True)
        admin_user.password = make_password(random_password)
        admin_user.save()
        Configuration.objects.using(db_alias).create(
    name="whispers_admin_user", value=admin_user.id)
        print(
            f"Created admin user with password '{random_password}' - use 'python manage.py changepassword admin' to change the password")


def get_admin_user_id(apps, schema_editor):
    Configuration = apps.get_model("whispersapi", "Configuration")
    db_alias = schema_editor.connection.alias
    whispers_admin_user_record = Configuration.objects.using(
        db_alias).filter(name='whispers_admin_user')
    if whispers_admin_user_record.exists():
        return int(whispers_admin_user_record.first().value)
    if (hasattr(settings, "WHISPERS_ADMIN_USER_ID")
            and isinstance(settings.WHISPERS_ADMIN_USER_ID, int)):
        return settings.WHISPERS_ADMIN_USER_ID
    else:
        return None


def get_nwhc_org_id(apps, schema_editor):
    Configuration = apps.get_model("whispersapi", "Configuration")
    db_alias = schema_editor.connection.alias
    nwhc_org_record = Configuration.objects.using(
        db_alias).filter(name='nwhc_organization')
    if nwhc_org_record.exists():
        return int(nwhc_org_record.first().value)
    if (hasattr(settings, "NWHC_ORG_ID")
            and isinstance(settings.NWHC_ORG_ID, int)):
        return settings.NWHC_ORG_ID
    else:
        return None


def create_if_missing(apps, schema_editor, model_name, lookups):
    ModelClass = apps.get_model("whispersapi", model_name)
    db_alias = schema_editor.connection.alias
    results = []
    for keys, defaults in lookups:
        instance, created = ModelClass.objects.using(db_alias).get_or_create(
            **keys, defaults=defaults
        )
        results.append((instance, created))
    return results


def create_roles_if_missing(apps, schema_editor):
    admin_user_id = get_admin_user_id(apps, schema_editor)
    db_alias = schema_editor.connection.alias
    defaults = dict(created_date=datetime.date.today(),
                    modified_date=datetime.date.today(),
                    created_by_id=admin_user_id,
                    modified_by_id=admin_user_id)
    role_lookups = [(dict(name="SuperAdmin"), defaults),
                    (dict(name="Admin"), defaults),
                    (dict(name="PartnerAdmin"), defaults),
                    (dict(name="PartnerManager"), defaults),
                    (dict(name="Partner"), defaults),
                    (dict(name="Affiliate"), defaults),
                    (dict(name="Public"), defaults)]
    roles = create_if_missing(apps, schema_editor, "Role", role_lookups)
    for role, created in roles:
        if created and role.name == "SuperAdmin":
            User = apps.get_model("whispersapi", "User")
            admin_user = User.objects.using(db_alias).get(pk=admin_user_id)
            admin_user.role = role
            admin_user.save()


def create_organizations_if_missing(apps, schema_editor):
    admin_user_id = get_admin_user_id(apps, schema_editor)
    db_alias = schema_editor.connection.alias
    defaults = dict(created_date=datetime.date.today(),
                    modified_date=datetime.date.today(),
                    created_by_id=admin_user_id,
                    modified_by_id=admin_user_id,
                    do_not_publish=True)
    org_lookups = [(dict(name="Public"), defaults)]
    create_if_missing(apps, schema_editor, "Organization", org_lookups)

    nwhc_org_id = get_nwhc_org_id(apps, schema_editor)

    Organization = apps.get_model("whispersapi", "Organization")
    if nwhc_org_id is None or not Organization.objects.using(
            db_alias).filter(pk=nwhc_org_id).exists():
        nwhc_org = Organization.objects.using(db_alias).create(
            name="U.S. Geological Survey - National Wildlife Health Center",
            created_by_id=admin_user_id,
            modified_by_id=admin_user_id)

        User = apps.get_model("whispersapi", "User")
        admin_user = User.objects.using(db_alias).get(pk=admin_user_id)
        admin_user.organization = nwhc_org
        admin_user.save()

        Configuration = apps.get_model("whispersapi", "Configuration")
        Configuration.objects.using(db_alias).update_or_create(
            name="nwhc_organization", defaults=dict(value=nwhc_org.id))


def create_countries_if_missing(apps, schema_editor):
    admin_user_id = get_admin_user_id(apps, schema_editor)
    country_lookups = [
        (dict(abbreviation="USA"),
         dict(name="United States", created_by_id=admin_user_id))]
    create_if_missing(apps, schema_editor, "Country", country_lookups)


def create_event_types_if_missing(apps, schema_editor):
    admin_user_id = get_admin_user_id(apps, schema_editor)
    event_type_lookups = [
        (dict(name="Mortality/Morbidity"), dict(created_by_id=admin_user_id)),
        (dict(name="Surveillance"), dict(created_by_id=admin_user_id)),
    ]
    create_if_missing(apps, schema_editor, "EventType", event_type_lookups)


def create_comment_types_if_missing(apps, schema_editor):
    admin_user_id = get_admin_user_id(apps, schema_editor)
    defaults = dict(created_by_id=admin_user_id)
    comment_type_lookups = [
        (dict(name="Site description"), defaults),
        (dict(name="History"), defaults),
        (dict(name="Environmental factors"), defaults),
        (dict(name="Clinical signs"), defaults),
        (dict(name="Field Update"), defaults),
        (dict(name="Management"), defaults),
        (dict(name="Epidemiological"), defaults),
        (dict(name="NWHC"), defaults),
        (dict(name="Diagnostic"), defaults),
        (dict(name="Other"), defaults),
        (dict(name="Event Group"), defaults),
        (dict(name="Collaborator Alert"), defaults),
    ]
    create_if_missing(apps, schema_editor, "CommentType", comment_type_lookups)

class Migration(migrations.Migration):

    dependencies=[
        ('whispersapi', '0057_auto_20210210_1347'),
    ]

    operations=[
        migrations.RunPython(create_admin_user_if_missing,
                             migrations.RunPython.noop),
        migrations.RunPython(create_roles_if_missing,
                             migrations.RunPython.noop),
        migrations.RunPython(create_organizations_if_missing,
                             migrations.RunPython.noop),
        migrations.RunPython(create_countries_if_missing,
                             migrations.RunPython.noop),
        migrations.RunPython(create_event_types_if_missing,
                             migrations.RunPython.noop),
        migrations.RunPython(create_comment_types_if_missing,
                             migrations.RunPython.noop),
    ]
